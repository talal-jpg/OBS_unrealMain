/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// main.ts
__export(exports, {
  default: () => RelativeLineNumbers
});
var import_obsidian = __toModule(require("obsidian"));
var import_gutter = __toModule(require("@codemirror/gutter"));
var gutterMarker = (str) => new class extends import_gutter.GutterMarker {
  toDOM() {
    return document.createTextNode(str);
  }
}();
var relativeLineNumbersExtension = () => (0, import_gutter.gutter)({
  lineMarker(view, line) {
    const lineNo = view.state.doc.lineAt(line.from).number;
    if (lineNo > view.state.doc.lines) {
      return gutterMarker("0");
    }
    const cursorLine = view.state.doc.lineAt(view.state.selection.asSingle().ranges[0].to).number;
    if (lineNo === cursorLine) {
      return gutterMarker("0");
    } else {
      return gutterMarker(Math.abs(cursorLine - lineNo).toString());
    }
  },
  lineMarkerChange(update) {
    if (update.selectionSet) {
      const startLineNo = update.startState.doc.lineAt(update.startState.selection.asSingle().ranges[0].to).number;
      const lineNo = update.state.doc.lineAt(update.state.selection.asSingle().ranges[0].to).number;
      return lineNo !== startLineNo;
    }
  }
});
var RelativeLineNumbers = class extends import_obsidian.Plugin {
  onload() {
    if (this.isLegacyEditorEnabled()) {
      this.registerLegacyExtension();
    } else {
      this.registerEditorExtension(relativeLineNumbersExtension());
    }
  }
  unload() {
    this.app.workspace.iterateCodeMirrors((cm) => {
      cm.off("cursorActivity", this.legacyHandler);
      cm.setOption("lineNumberFormatter", CodeMirror.defaults["lineNumberFormatter"]);
      if (!this.isShowLineNumberEnabled()) {
        cm.setOption("lineNumbers", false);
      }
    });
  }
  registerLegacyExtension() {
    this.registerCodeMirror((cm) => {
      cm.setOption("lineNumbers", true);
      cm.on("cursorActivity", this.legacyHandler);
    });
  }
  legacyHandler(cm) {
    const current = cm.getCursor().line + 1;
    if (cm.state.curLineNum === current) {
      return;
    }
    cm.state.curLineNum = current;
    cm.setOption("lineNumberFormatter", (line) => {
      if (line === current) {
        return String(current);
      }
      return String(Math.abs(current - line));
    });
  }
  isLegacyEditorEnabled() {
    return this.app.vault.getConfig("legacyEditor");
  }
  isShowLineNumberEnabled() {
    return this.app.vault.getConfig("showLineNumber");
  }
};


/* nosourcemap */